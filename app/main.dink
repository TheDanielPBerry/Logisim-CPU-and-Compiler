
CONST PAUSE_DEVICE: *char = 0xFF06
#INCLUDEIFNOT 'lib/stdlib.dink'
#INCLUDEIFNOT 'lib/stdio.dink'
#INCLUDEIFNOT 'lib/string.dink'
#INCLUDEIFNOT 'lib/math.dink'
#INCLUDEIFNOT 'lib/hash.dink'
#INCLUDEIFNOT 'lib/list.dink'
#INCLUDEIFNOT 'lib/test.dink'
#INCLUDEIFNOT 'lib/triangle.dink'
#INCLUDEIFNOT 'lib/graphics.dink'
#INCLUDEIFNOT 'lib/float.dink'
#INCLUDEIFNOT 'bin/fibo.dink'
#INCLUDEIFNOT 'bin/calc.dink'
#INCLUDEIFNOT 'bin/shell.dink'



//Breakpoint!
//MOV A -> PAUSE_DEVICE

DEFINE triangle_1: *word = {0x0000, 0xb9ff, 0x3800, 0x4800,  0x3c00, 0x0000, 0x0000,  0x3800, 0x3800, 0x4000, 0x0000, 0x3c00, 0x0000,  0x0000, 0xb800, 0x3c00, 0x0000, 0x0000, 0x3c00 }
DEFINE triangle_2: *word = {0x0000, 0xb800, 0xb800, 0x3c00,  0x3c00, 0x3c00, 0x3c00,  0x3800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x3c00,  0x0000, 0x3800, 0x4400, 0x2e66, 0x2e66, 0x2e66 }

//0.5 = 0x3800
//1 = 0x3c00
DEFINE cube_bottom_1: *word = { 0x0000, 0x3800, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x3c00,  0x3800, 0x3800, 0x4000, 0x2e66, 0x2e66, 0x2e66,  0xb800, 0x3800, 0x4000, 0x2e66, 0x2e66, 0x2e66 }
DEFINE cube_bottom_2: *word = { 0x0000, 0x3800, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x3c00,  0xb800, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x3c00,  0xb800, 0x3800, 0x4000, 0x2e66, 0x2e66, 0x2e66 }

DEFINE cube_top_1: *word = { 0x0000, 0x3800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0x3800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x2e66, 0xb800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x2e66 }
DEFINE cube_top_2: *word = { 0x0000, 0x3800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0xb800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0xb800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x2e66 }

DEFINE cube_left_1: *word = { 0x0000, 0xb800, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0xb800, 0x3800, 0x4000, 0x2e66, 0x2e66, 0x0000, 0xb800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x0000 }
DEFINE cube_left_2: *word = { 0x0000, 0xb802, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0xb800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0xb800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x0000 }

DEFINE cube_right_1: *word = { 0x0000, 0x3800, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0x3802, 0x3800, 0x4000, 0x2e66, 0x2e66, 0x0000, 0x3800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x0000 }
DEFINE cube_right_2: *word = { 0x0000, 0x3802, 0x3800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0x3800, 0xb800, 0x3c00, 0x3c00, 0x3c00, 0x0000, 0x3800, 0xb800, 0x4000, 0x2e66, 0x2e66, 0x0000 }

FUNC main()
	CALL clear_screen()

	CALL fill_triangle(&cube_bottom_1)
	CALL fill_triangle(&cube_bottom_2)

	CALL fill_triangle(&cube_left_1)
	CALL fill_triangle(&cube_left_2)

	CALL fill_triangle(&cube_top_1)
	CALL fill_triangle(&cube_top_2)

	CALL fill_triangle(&cube_right_1)
	CALL fill_triangle(&cube_right_2)

	MOV A -> PAUSE_DEVICE
	CALL init_heap()
	CALL malloc(16)
	DEFINE coord_input: *char = !returnVal

	DEFINE coord_input_length: word = 0

	CALL set_color(20, 255, 20)

	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE x1: word = !returnVal

	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE y1: word = !returnVal

	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE x2: word = !returnVal

	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE y2: word = !returnVal


	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE x3: word = !returnVal

	CALL scanline(coord_input)
	SET coord_input_length = !returnVal
	CALL parse_float(coord_input, coord_input_length)
	DEFINE y3: word = !returnVal

	CALL clear_screen()
	DEFINE in_char: char = 0

	ENTRY :continue_loop
		CALL draw_float_triangle(x1, y1, x2, y2, x3, y3)

		WHILE in_char != 'q'
			SET in_char = getchar
			IF in_char == 'j'
				SET *putchar = 'j'
				CALL float_mul(x1, 0x3B32)
				SET x1 = !returnVal
				CALL float_mul(y1, 0x3B32)
				SET y1 = !returnVal
				CALL float_mul(x2, 0x3B32)
				SET x2 = !returnVal
				CALL float_mul(y2, 0x3B32)
				SET y2 = !returnVal
				CALL float_mul(x3, 0x3B32)
				SET x3 = !returnVal
				CALL float_mul(y3, 0x3B32)
				SET y3 = !returnVal
				GOTO :continue_loop
			ELSEIF in_char == 'k'
				SET *putchar = 'k'
				CALL float_mul(x1, 0x3C71)
				SET x1 = !returnVal
				CALL float_mul(y1, 0x3C71)
				SET y1 = !returnVal
				CALL float_mul(x2, 0x3C71)
				SET x2 = !returnVal
				CALL float_mul(y2, 0x3C71)
				SET y2 = !returnVal
				CALL float_mul(x3, 0x3C71)
				SET x3 = !returnVal
				CALL float_mul(y3, 0x3C71)
				SET y3 = !returnVal
				GOTO :continue_loop
			ENDIF
		ENDWHILE

		WHILE TRUE
			SET *putchar = 'q'
		ENDWHILE

	ENTRY :step_back_j
	GOTO :continue_loop

	ENTRY :step_forward_k


	//CALL fill_rect(20, 20, 40, 40)
	//CALL fibo_program()
	//CALL calc_program()
	//CALL shell()
	//CALL test_float()
ENDFUNC
