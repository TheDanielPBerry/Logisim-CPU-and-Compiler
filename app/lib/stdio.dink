

CONST putchar: *char = 0xFF02
CONST getchar: *char = 0xFF04


FUNC print(str: *char): word
	MOV str -> IDX
	ENTRY :loop_print
		MOV MIX -> A (0000)
		ALU A | 0 -> NUL
		JE :exit_print
		MOV A -> *putchar
		ALU IDX + 1 -> IDX
	GOTO :loop_print
	ENTRY :exit_print
	//DEFINE index: word = 0
	//WHILE str[index] != 0
	//	SET *putchar = str[index]
	//	SET index = index + 1
	//ENDWHILE
	//RETURN index
ENDFUNC

FUNC println(str: *char): word
	CALL print(str)
	SET *putchar = '\\n'
	RETURN !returnVal
ENDFUNC


FUNC scanline(str: *char): word
	DEFINE index: word = 0
	DEFINE character: char = getchar
	
	WHILE character != '\\n'
		IF character != 0
			SET *putchar = character
			IF character == 8
				SET index = index - 1
			ELSE
				SET str[index] = character
				SET index = index + 1
			ENDIF
		ENDIF
		SET character = getchar
	ENDWHILE
	SET *putchar = '\\n'
	SET str[index] = 0
	RETURN index
ENDFUNC


//Written in assembler for speed sake
FUNC print_word(num: word)
	CONST convert_digit: *word = 0xFF10
	CONST digit: *char = 0xFF12
	SET *convert_digit = num

	ENTRY :loop_print_word
		MOV digit -> A
		ALU A | 0 -> NUL
		JE :return_print_word
		MOV A -> *putchar
	GOTO :loop_print_word
	ENTRY :return_print_word
ENDFUNC