//Get String length
FUNC str_len(str: *char): word
	DEFINE index: word = 0
	WHILE str[index] != 0
		SET index = index + 1
	ENDWHILE
	RETURN index
ENDFUNC

FUNC str_pos(needle: *char, haystack: *char): word
	//DEFINE haystackIndex: word = 0
	//DEFINE needleIndex: word = 0
	//
	//ENTRY :increment_needle_str_pos
	//	SET needleIndex = needleIndex + 1
	//	MOV needleIndex > B
	//	MOV needle > IDX
	//	MOV MAR > A (B630)
//
	//	MOV haystackIndex > D
//
	//ENTRY :increment_haystack_str_pos
	//	MOV haystack > IDX
	//	MOV MAR > B (B830)
	//	ALU D|1 > D
	//	ALU A|B > NUL
	//	JE :increment_needle_str_pos
	//	SET needleIndex = 1
	//	GOTO :increment_haystack_str_pos
	//WHILE (char)needle[needleIndex] != (char)0
	//	IF (char)haystack[haystackIndex] == 0
	//		RETURN -1
	//	ENDIF
	//	SET needleIndex = 0
	//	WHILE (char)haystack[haystackIndex] == (char)needle[needleIndex]
	//		SET needleIndex = needleIndex+1
	//	ENDWHILE
	//	SET haystackIndex = haystackIndex+1
	//ENDWHILE
	//SET haystackIndex = haystackIndex - needleIndex
	//RETURN haystackIndex

	DEFINE haystackTracker: word = 0
	DEFINE haystackIndex: word = 0
	DEFINE needleIndex: word = 0

	WHILE (char)haystack[haystackIndex] != (char)0
		SET needleIndex = 0
		SET haystackTracker = haystackIndex

		WHILE (char)haystack[haystackTracker] == (char)needle[needleIndex]
			IF (char)needle[needleIndex] == 0
				RETURN haystackIndex
			ENDIF
			SET needleIndex = needleIndex + 1
			SET haystackTracker = haystackTracker + 1
		ENDWHILE

		IF (char)needle[needleIndex] == 0
			RETURN haystackIndex
		ENDIF

		SET haystackIndex = haystackIndex+1
	ENDWHILE
	RETURN -1
ENDFUNC

//String compare
FUNC str_cmp(left: *char, right: *char): char
	DEFINE index: word = 0
	WHILE left[index] == right[index]
		IF left[index] == 0
			RETURN TRUE
		ENDIF
		SET index = index + 1
	ENDWHILE
	RETURN FALSE
ENDFUNC



//Copy a string
FUNC str_copy(src: *char, dest: *char)
	DEFINE index: word = 0
	WHILE src[index] != 0
		SET dest[index] = src[index]
		SET index = index+1
	ENDWHILE
	dest[index] = 0
ENDFUNC


//Written in assembler for speed sake
FUNC word_to_string(num: word): *char
	CONST convert_digit: *word = 0xFF10
	CONST digit: *char = 0xFF12
	CONST str: *char = 0x8000
	SET *convert_digit = num

	MOV (word)0x8000 -> IDX
	ENTRY :loop_word_to_string
		MOV digit -> A
		MOV A -> MIX (0000)
		ALU A | 0 -> NUL
		JE :return_word_to_string
		ALU IDX+1 -> IDX
	GOTO :loop_word_to_string
	ENTRY :return_word_to_string
	RETURN &str
ENDFUNC