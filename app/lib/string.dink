#INCLUDEIFNOT "lib/stdlib.h"

//Get String length
FUNC str_len(str: *char): word
	DEFINE index: word = 0
	WHILE str[index] != 0
		SET index = index + 1
	ENDWHILE
	RETURN index
ENDFUNC

FUNC strchr(needle: char, haystack: *char): word
	DEFINE haystackIndex: word = 0

	WHILE (char)haystack[haystackIndex] != (char)0
		IF (char)haystack[haystackIndex] == (char)needle
			RETURN haystackIndex
		ENDIF
		SET haystackIndex = haystackIndex + 1
	ENDWHILE
	RETURN -1
ENDFUNC


FUNC strpos(needle: *char, haystack: *char): word
	//DEFINE haystackIndex: word = 0
	//DEFINE needleIndex: word = 0
	//
	//ENTRY :increment_needle_str_pos
	//	SET needleIndex = needleIndex + 1
	//	MOV needleIndex > B
	//	MOV needle > IDX
	//	MOV MAR > A (B630)
//
	//	MOV haystackIndex > D
//
	//ENTRY :increment_haystack_str_pos
	//	MOV haystack > IDX
	//	MOV MAR > B (B830)
	//	ALU D|1 > D
	//	ALU A|B > NUL
	//	JE :increment_needle_str_pos
	//	SET needleIndex = 1
	//	GOTO :increment_haystack_str_pos
	//WHILE (char)needle[needleIndex] != (char)0
	//	IF (char)haystack[haystackIndex] == 0
	//		RETURN -1
	//	ENDIF
	//	SET needleIndex = 0
	//	WHILE (char)haystack[haystackIndex] == (char)needle[needleIndex]
	//		SET needleIndex = needleIndex+1
	//	ENDWHILE
	//	SET haystackIndex = haystackIndex+1
	//ENDWHILE
	//SET haystackIndex = haystackIndex - needleIndex
	//RETURN haystackIndex

	DEFINE haystackTracker: word = 0
	DEFINE haystackIndex: word = 0
	DEFINE needleIndex: word = 0

	WHILE (char)haystack[haystackIndex] != (char)0
		SET needleIndex = 0
		SET haystackTracker = haystackIndex

		WHILE (char)haystack[haystackTracker] == (char)needle[needleIndex]
			IF (char)needle[needleIndex] == 0
				RETURN haystackIndex
			ENDIF
			SET needleIndex = needleIndex + 1
			SET haystackTracker = haystackTracker + 1
		ENDWHILE

		IF (char)needle[needleIndex] == 0
			RETURN haystackIndex
		ENDIF

		SET haystackIndex = haystackIndex+1
	ENDWHILE
	RETURN -1
ENDFUNC

//String compare
FUNC strcmp(left: *char, right: *char): char
	DEFINE index: word = 0
	DEFINE result: word = left[0] - right[0]
	WHILE result == 0
		IF left[index] == 0
			RETURN result
		ENDIF
		SET index = index + 1
		SET result = left[index] - right[index]
	ENDWHILE
	RETURN result
ENDFUNC



//Copy a string
FUNC strcpy(dest: *char, src: *char): *char
	DEFINE index: word = 0
	WHILE (char)src[index] != (char)0
		SET dest[index] = src[index]
		SET index = index+1
	ENDWHILE
	SET dest[index] = (char)0
	RETURN dest
ENDFUNC

FUNC strncpy(dest: *char, src: *char, n: word): *char
	DEFINE index: word = 0
	WHILE (char)src[index] != (char)0
		IF index > n
			ALU A | 0 -> NUL
			JE :exit_strncpy
		ENDIF
		SET dest[index] = src[index]
		SET index = index + 1
	ENDWHILE

	ENTRY :exit_strncpy
	SET dest[index] = (char)0
	RETURN dest
ENDFUNC


FUNC strlen(subject: *char): word
	DEFINE index: word = 0
	WHILE (char)subject[index] != (char)0
		SET index = index + 1
	ENDWHILE
	RETURN index
ENDFUNC


DEFINE TRIM_DEFAULT_CHARACTERS: *char = " \t"
FUNC trim_in_place(subject: *char, characters: *char): *char
	CALL breakpoint()
	IF characters == (*char)NULL
		SET characters = TRIM_DEFAULT_CHARACTERS
	ENDIF

	DEFINE index: word = 0
	DEFINE direction: word = 1
	DEFINE str_start: word = 0
	DEFINE str_end: word = 0
	DEFINE str_examine: char = (char)subject[index]
	DEFINE result: word = 0

	WHILE str_examine != (char)0
		CALL strchr(str_examine, characters)
		SET result = !returnVal

		CALL print_word(index)
		SET *putchar = 0x20
		CALL print_word(result)
		SET *putchar = 10

		IF result < 0
			CALL breakpoint()
			IF direction < 0
				SET str_end = index - str_start
				DEFINE src: *char = subject + str_start
				CALL strncpy(subject, src, str_end)
				RETURN subject
			ELSE
				SET str_start = index
				CALL strlen(subject)
				SET index = !returnVal
				SET direction = direction * -1
			ENDIF
		ENDIF
		SET index = index + direction
		SET str_examine = (char)subject[index]
	ENDWHILE
ENDFUNC


//Written in assembler for speed sake
FUNC word_to_string(num: word): *char
	CONST convert_digit: *word = 0xFF10
	CONST digit: *char = 0xFF12
	CONST str: *char = 0x8000
	SET *convert_digit = num

	MOV (word)0x8000 -> IDX
	ENTRY :loop_word_to_string
		MOV digit -> A
		MOV A -> MIX (0000)
		ALU A | 0 -> NUL
		JE :return_word_to_string
		ALU IDX+1 -> IDX
	GOTO :loop_word_to_string
	ENTRY :return_word_to_string
	RETURN &str
ENDFUNC
